// input -> a weighted graph and a source
// ouput -> distance of all nodes from the source

/*
u -> v

if d[u] + c(u, v) < d[v]:
    d[v] = d[u] + c(u, v)

*/


// space complexity -> O(m)
// time complexity ===> O(m log n)

- create a distance array "d"  
- initialize all values of "d" to infinity  -> O(n)
- d[src] = 0
- create a visited array and mark all nodes as unvisited -> O(n)
- take an empty reverse priority_queue "pq"
- pq.push({0, src})

- while the priority_queue is not empty: -> O(E)
    - head_distance, head = pq.front() 
    - pq.pop() -> O(log E)
    - if visited[head] == 1: ignore
    - visited[head] = 1
    - for all adj_node of head: -> O(E)
        - if d[head] + c(head, adj_node) < d[adj_node]:
            - d[adj_node] = d[head] + c(head, adj_node)
            - pq.push({ d[adj_node], adj_node }); -> O(log E)

- ouput array "d" 

 
 O(n) + O(E log E) + O(E log E)
 -> O(|E| log |E|) 
 -> O(|E| log |V^2|)
 -> O(2|E| log |V|)
 -> O(|E| log |V|)   [base 2]




// Pseudocode: Bellman-Ford

Input -> A weighted graph & a src node (with no negative cycles) & a destination_node
Ouput -> Shortest distance from src node to all other nodes


n -> number of nodes in graph
m -> number of edges in graph


time complexity -> O(n*m)
Space Complexity -> O(n)


/*
u ----> v

d[u] + c(u,v) < d[v]
=> d[v] = d[u] + c(u,v)

*/

- create a distance array "d" with all values to infinity
- create a parent array
- d[src] = 0 

- negative_cycle = false
- last_updated_node = -1

- for i = 1 to n: 
    - for all edge e(u, v, w):
        - if d[u] + w < d[v]:
            - d[v] = d[u] + w
            - parent[v] = u
            - if i == n: 
                - negative_cycle = true 
                - last_updated_node = v

- if negative_cycle == false: -> O(n)
    - print the distance array "d" 
    - selected_node = destination_node
    - declare a vector path
    - while true:
        - path.push_back(selected_node)
        - if selected_node == src: 
            break
        - selected_node = parent[selected_node]
    - reverse the vector path
    - print the path

else:  ->  O(n)
    - print negatice cycle exists
    - selected_node = last_updated_node
    - for i = 1 to n-1:  -> O(n)
        - selected_node = parent[selected_node]
    - first_node = selected_node
    - declare a vector "cycle"
    - cycle.push_back(selected_node)
    - while true: -> O(n)
        - selected_node = parent[selected_node]
        - cycle.push_back(selected_node)
        - if selected_node == first_node:
            - break
    - reverse the "cycle" vector
    - print the cycle
